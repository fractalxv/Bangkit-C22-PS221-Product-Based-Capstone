# -*- coding: utf-8 -*-
"""HerbsApp_(2) (1).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-uV2BFdfqiVnWiIEaQi96aEUq5-ZrqMU

**Import data from drive**
"""

from google.colab import drive
drive.mount('/content/gdrive')
!ls

"""**Unzip File**"""

import zipfile

# Unzip the dataset
local_zip = './gdrive/MyDrive/DATASET_TANAMAN_HERBAL.zip'
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('./herbs-plant')
zip_ref.close()

"""**Define Directories**"""

import os

#train
train_jambu_dir = os.path.join('./herbs-plant/Data_Training/Daun_Jambu_Biji')
train_kari_dir = os.path.join('./herbs-plant/Data_Training/Daun_Kari')
train_kemangi_dir = os.path.join('./herbs-plant/Data_Training/Daun_Kemangi')
train_kunyit_dir = os.path.join('./herbs-plant/Data_Training/Daun_Kunyit')
train_mint_dir = os.path.join('./herbs-plant/Data_Training/Daun_Mint')
train_pepaya_dir = os.path.join('./herbs-plant/Data_Training/Daun_Pepaya')
train_sirih_dir = os.path.join('./herbs-plant/Data_Training/Daun_Sirih')
train_sirsak_dir = os.path.join('./herbs-plant/Data_Training/Daun_Sirsak')
train_lidahbuaya_dir = os.path.join('./herbs-plant/Data_Training/Lidah_Buaya')
train_tehhijau_dir = os.path.join('./herbs-plant/Data_Training/Teh_Hijau')

#validation
validation_jambu_dir = os.path.join('./herbs-plant/Data_Validation/Daun_Jambu_Biji')
validation_kari_dir = os.path.join('./herbs-plant/Data_Validation/Daun_Kari')
validation_kemangi_dir = os.path.join('./herbs-plant/Data_Validation/Daun_Kemangi')
validation_kunyit_dir = os.path.join('./herbs-plant/Data_Validation/Daun_Kunyit')
validation_mint_dir = os.path.join('./herbs-plant/Data_Validation/Daun_Mint')
validation_pepaya_dir = os.path.join('./herbs-plant/Data_Validation/Daun_Pepaya')
validation_sirih_dir = os.path.join('./herbs-plant/Data_Validation/Daun_Sirih')
validation_sirsak_dir = os.path.join('./herbs-plant/Data_Validation/Daun_Sirsak')
validation_lidahbuaya_dir = os.path.join('./herbs-plant/Data_Validation/Lidah_Buaya')
validation_tehhijau_dir = os.path.join('./herbs-plant/Data_Validation/Teh_Hijau')

print('JAMBU BIJI TRAIN SET:', len(os.listdir(train_jambu_dir)))
print('KARI TRAIN SET:', len(os.listdir(train_kari_dir)))
print('KEMANGI TRAIN SET:', len(os.listdir(train_kemangi_dir)))
print('KUNYIT TRAIN SET:', len(os.listdir(train_kunyit_dir)))
print('MINT TRAIN SET:', len(os.listdir(train_mint_dir)))
print('PEPAYA TRAIN SET:', len(os.listdir(train_pepaya_dir)))
print('SIRIH TRAIN SET:', len(os.listdir(train_sirih_dir)))
print('SIRSAK TRAIN SET:', len(os.listdir(train_sirsak_dir)))
print('LIDAH BUAYA TRAIN SET:', len(os.listdir(train_lidahbuaya_dir)))
print('TEH HIJAU TRAIN SET:', len(os.listdir(train_tehhijau_dir)))

print('JAMBU BIJI VALIDATION SET:', len(os.listdir(validation_jambu_dir)))
print('KARI VALIDATION SET:', len(os.listdir(validation_kari_dir)))
print('KEMANGI VALIDATION SET:', len(os.listdir(validation_kemangi_dir)))
print('KUNYIT VALIDATION SET:', len(os.listdir(validation_kunyit_dir)))
print('MINT VALIDATION SET:', len(os.listdir(validation_mint_dir)))
print('PEPAYA VALIDATION SET:', len(os.listdir(validation_pepaya_dir)))
print('SIRIH VALIDATION SET:', len(os.listdir(validation_sirih_dir)))
print('SIRSAK VALIDATION SET:', len(os.listdir(validation_sirsak_dir)))
print('LIDAH VALIDATION TRAIN SET:', len(os.listdir(validation_lidahbuaya_dir)))
print('TEH HIJAU VALIDATION SET:', len(os.listdir(validation_tehhijau_dir)))

"""**check data**"""

#train data
train_jambu_names = os.listdir(train_jambu_dir)
print(f'JAMBU BIJI TRAIN SET: {train_jambu_names[:10]}')

train_kari_names = os.listdir(train_kari_dir)
print(f'KARI TRAIN SET: {train_kari_names[:10]}')

train_kemangi_names = os.listdir(train_kemangi_dir)
print(f'KEMANGI TRAIN SET: {train_kemangi_names[:10]}')

train_kunyit_names = os.listdir(train_kunyit_dir)
print(f'KUNYIT TRAIN SET: {train_kunyit_names[:10]}')

train_mint_names = os.listdir(train_mint_dir)
print(f'MINT TRAIN SET: {train_mint_names[:10]}')

train_pepaya_names = os.listdir(train_pepaya_dir)
print(f'PEPAYA TRAIN SET: {train_pepaya_names[:10]}')

train_sirih_names = os.listdir(train_sirih_dir)
print(f'SIRIH TRAIN SET: {train_sirih_names[:10]}')

train_sirsak_names = os.listdir(train_sirsak_dir)
print(f'SIRIH TRAIN SET: {train_sirsak_names[:10]}')

train_lidahbuaya_names = os.listdir(train_lidahbuaya_dir)
print(f'LIDAH BUAYA TRAIN SET: {train_lidahbuaya_names[:10]}')

train_tehhijau_names = os.listdir(train_tehhijau_dir)
print(f'TEH HIJAU TRAIN SET: {train_tehhijau_names[:10]}')

#validation data
validation_jambu_names = os.listdir(validation_jambu_dir)
print(f'JAMBU BIJI VAL SET: {train_jambu_names[:10]}')

validation_kari_names = os.listdir(validation_kari_dir)
print(f'KARI VAL SET: {validation_kari_names[:10]}')

validation_kemangi_names = os.listdir(validation_kemangi_dir)
print(f'KEMANGI VAL SET: {validation_kemangi_names[:10]}')

validation_kunyit_names = os.listdir(validation_kunyit_dir)
print(f'KUNYIT VAL SET: {validation_kunyit_names[:10]}')

validation_mint_names = os.listdir(validation_mint_dir)
print(f'MINT VAL SET: {validation_mint_names[:10]}')

validation_pepaya_names = os.listdir(validation_pepaya_dir)
print(f'PEPAYA VAL SET: {validation_pepaya_names[:10]}')

validation_sirih_names = os.listdir(validation_sirih_dir)
print(f'SIRIH VAL SET: {validation_sirih_names[:10]}')

validation_sirsak_names = os.listdir(validation_sirsak_dir)
print(f'SIRIH VAL SET: {validation_sirsak_names[:10]}')

validation_lidahbuaya_names = os.listdir(validation_lidahbuaya_dir)
print(f'LIDAH BUAYA VAL SET: {validation_lidahbuaya_names[:10]}')

validation_tehhijau_names = os.listdir(validation_tehhijau_dir)
print(f'TEH HIJAU VAL SET: {validation_tehhijau_names[:10]}')

"""**SETUP**"""

# Commented out IPython magic to ensure Python compatibility.
try:
#     %tensorflow_version 2.x
except:
    pass

"""**IMPORT**"""

import os
import json
import tempfile
import requests
import numpy as np
import tensorflow as tf
import keras_preprocessing
from keras_preprocessing import image
from keras_preprocessing.image import ImageDataGenerator

print("\u2022 Using TensorFlow Version:", tf.__version__)

"""Install TF Serving"""

!echo "deb http://storage.googleapis.com/tensorflow-serving-apt stable tensorflow-model-server tensorflow-model-server-universal" | tee /etc/apt/sources.list.d/tensorflow-serving.list && \
curl https://storage.googleapis.com/tensorflow-serving-apt/tensorflow-serving.release.pub.gpg | apt-key add -
!apt update

!apt-get install tensorflow-model-server

"""**Data Augmentation**"""

dir_training = "./herbs-plant/Data_Training/"

training_datagen = ImageDataGenerator(
      rescale = 1.0/255.,
      featurewise_center=False,  
      samplewise_center=False,  
      featurewise_std_normalization=False,  
      samplewise_std_normalization=False,  
      zca_whitening=False,
	    rotation_range=30,
      width_shift_range=0.1,
      height_shift_range=0.1,
      shear_range=0.3,
      zoom_range=0.1,
      horizontal_flip=True,
      vertical_flip=True,
      fill_mode='nearest')

train_generator = training_datagen.flow_from_directory(
	dir_training,
	target_size=(224,224),
	class_mode='categorical'
)

dir_validation = "./herbs-plant/Data_Validation/"

validation_datagen = ImageDataGenerator(rescale = 1.0/255.)

validation_generator = validation_datagen.flow_from_directory(
	dir_validation,
	target_size=(224,224),
	class_mode='categorical',
)

from tensorflow.keras.applications.xception import Xception
from tensorflow.keras.preprocessing import image
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Dropout, Dense, Flatten
from tensorflow.keras.optimizers import Adam

model = Xception(weights='imagenet', input_shape = (224,224,3), include_top=False, pooling = 'avg')

x = model.output

x = Flatten()(x)
x = Dense(1024, activation='relu')(x)
x = Dropout(0.2)(x)
x = Dense(64, activation='relu')(x)
x = Dropout(0.2)(x)
x = Dense(16, activation='relu')(x)
x = Dense(11, activation='softmax')(x)

model_herbs = Model(inputs=model.input, outputs=x)

for layer in model.layers:
    layer.trainable = False

model_herbs.summary()

model_herbs.compile(optimizer='adam', loss='categorical_crossentropy', metrics = ['accuracy'])

history = model_herbs.fit(train_generator, epochs=15, steps_per_epoch=25, validation_data = validation_generator, verbose = 1)

import matplotlib.pyplot as plt

# Plot the model results
acc = history.history['accuracy']
val_acc = history.history['val_accuracy']
loss = history.history['loss']
val_loss = history.history['val_loss']

epochs = range(len(acc))

plt.plot(epochs, acc, 'r', label='Training accuracy')
plt.plot(epochs, val_acc, 'b', label='Validation accuracy')
plt.title('Training and validation accuracy')

plt.figure()

plt.plot(epochs, loss, 'r', label='Training Loss')
plt.plot(epochs, val_loss, 'b', label='Validation Loss')
plt.title('Training and validation loss')
plt.legend()

plt.show()

"""**Save Model**"""

import tempfile

MODEL_DIR = tempfile.gettempdir()
version = 1
export_path = os.path.join(MODEL_DIR, str(version))
print('export_path = {}\n'.format(export_path))

tf.keras.models.save_model(
    model,
    export_path,
    overwrite=True,
    include_optimizer=True,
    save_format=None,
    signatures=None,
    options=None
)

print('\nSaved model:')
!ls -l {export_path}

!saved_model_cli show --dir {export_path} --all

"""**Run the TensorFlow Model Server**"""

os.environ["MODEL_DIR"] = MODEL_DIR

# Commented out IPython magic to ensure Python compatibility.
# %%bash --bg 
# nohup tensorflow_model_server \
#   --rest_api_port=8501 \
#   --model_name=leafy \
#   --model_base_path="${MODEL_DIR}" >server.log 2>&1

!tail server.log

"""**SAVE FILE**"""

model_herbs.save("model_Xception_HerbsPlant.h5")
tf.keras.models.save_model(model_herbs,'model_Xception_HerbsPlant.hdf5')

#Convert ke TF Lite
import tensorflow as tf

#Load model yang telah disimpan
model_akhir = tf.keras.models.load_model(filepath="model_Xception_HerbsPlant.h5")

#Convert model tsb ke bentuk TF Lite
konversi = tf.lite.TFLiteConverter.from_keras_model(model_akhir)
model_tflite = konversi.convert()

#Simpan TF Lite model.
with tf.io.gfile.GFile('model_Xception_HerbsPlant.tflite', 'wb') as f:
  f.write(model_tflite)

model_herbs_json = model_herbs.to_json()
with open("model_tl_json", "w") as file_json:
    file_json.write(model_herbs_json)